# Generated by Django 4.2.7 on 2025-10-19 00:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mobile_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('subscription_tier', models.CharField(choices=[('free', 'Free'), ('premium', 'Premium')], default='free', max_length=20)),
                ('data_used', models.BigIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('wireguard_private_key', models.TextField(blank=True)),
                ('wireguard_public_key', models.TextField(blank=True)),
                ('client_certificate', models.TextField(blank=True)),
                ('client_private_key', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ConnectionLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event_type', models.CharField(choices=[('connect', 'Connect'), ('disconnect', 'Disconnect'), ('location_change', 'Location Change'), ('error', 'Error'), ('data_usage', 'Data Usage')], max_length=50)),
                ('details', models.JSONField(default=dict)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ProxyServer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.GenericIPAddressField()),
                ('port', models.IntegerField()),
                ('protocol', models.CharField(choices=[('http', 'HTTP'), ('socks5', 'SOCKS5'), ('https', 'HTTPS')], max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('load', models.FloatField(default=0.0)),
                ('latency', models.IntegerField(default=0)),
                ('max_users', models.IntegerField(default=100)),
                ('current_users', models.IntegerField(default=0)),
                ('location_data', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vpn_config', models.TextField(blank=True)),
                ('vpn_type', models.CharField(choices=[('openvpn', 'OpenVPN'), ('wireguard', 'WireGuard'), ('socks5', 'SOCKS5')], default='openvpn', max_length=20)),
                ('public_key', models.TextField(blank=True)),
                ('private_key', models.TextField(blank=True)),
                ('endpoint', models.CharField(blank=True, max_length=255)),
                ('encryption', models.CharField(default='AES-256-GCM', max_length=50)),
                ('handshake', models.CharField(default='RSA-2048', max_length=50)),
                ('ca_certificate', models.TextField(blank=True)),
                ('server_certificate', models.TextField(blank=True)),
                ('server_key', models.TextField(blank=True)),
                ('dh_params', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('original_ip', models.GenericIPAddressField()),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('data_used', models.BigIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('session_config', models.JSONField(default=dict)),
                ('vpn_pid', models.IntegerField(blank=True, null=True)),
                ('interface', models.CharField(blank=True, max_length=20)),
                ('assigned_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('vpn_config_file', models.TextField(blank=True)),
                ('is_routing', models.BooleanField(default=False)),
                ('proxy_server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='base.proxyserver')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='proxyserver',
            index=models.Index(fields=['country', 'is_active'], name='base_proxys_country_58343a_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyserver',
            index=models.Index(fields=['load', 'latency'], name='base_proxys_load_fb0b11_idx'),
        ),
        migrations.AddField(
            model_name='connectionlog',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='base.usersession'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='proxyapp_user_set', related_query_name='proxyapp_user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='proxyapp_user_set', related_query_name='proxyapp_user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
